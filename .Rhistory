start_time <- Sys.time()
# set seed for reproducability, important to get the same "fraud model"
# however, for my extra analysis, I do not want to set a seed
if (setseed == TRUE) {
set.seed(123)
}
# randomly estimate models for a certain amount of time
while ((coef <= coef_th | pval >= pval_th) && difftime(Sys.time(), start_time, units = "secs") < timeout && i < n_mod) {
# generate a random number between 0 and n_var (parameter for function)
n_expl <- sample(n_var, size = 1)
# now get a random sample with n_expl explanatory variables from the expl_var vector
expl_incl <- sample(variables, size = n_expl)
# estimate the model with the function from A5
model_tmp <- is_variable_significant_cpp(
response = "GR6096",
variable_to_assess = "SOCIALIST",
covariates = expl_incl
)
# reset the coefficient and pvalue and i (n_mod)
coef <- model_tmp$coefficient_estimate
pval <- model_tmp$p_value
i <- i + 1
# append row to tibble where we keep track of all tries
results <- results %>%
add_row(
expl_var = list(expl_incl),
results = model_tmp
)
}
# print message if model is found
if (coef > 0 && pval < 0.05) {
print(paste0("Estimated ", as.character(nrow(results)), " random models and found one significant positive estimate."))
}
results
}
# get the fraud model results from the fastLmPure estimation
fraud_results_fastLmPure <- est_random_models(n_var = 15, timeout = 100, setseed = TRUE) %>%
unnest(results) %>%
filter(coefficient_estimate > 0, p_value < 0.05)
# estimate this model with the lm function
fraud_model_lm <- fraud_results_fastLmPure %>%
filter(coefficient_estimate > 0, p_value < 0.05) %>%
pull(model_call) %>%
lm(., data = bacedata)
# display regression results in table with stargazer package
stargazer(fraud_model_lm,
type = "text",
title = "Regression Results of Fraud Model",
label = "tab:regression_results",
header = FALSE,
model.names = FALSE,
dep.var.labels.include = FALSE
)
# check if coefficient and p-value are the same in lm vs fastLmPure
print(paste0(
"coefficient Lm estimation: ",
summary(fraud_model_lm)$coefficients["SOCIALIST", "Estimate"]
))
print(paste0(
"coefficient fastLmPure estimation: ",
fraud_results_fastLmPure$coefficient_estimate
))
print(paste0(
"p-value Lm estimation: ",
summary(fraud_model_lm)$coefficients["SOCIALIST", "Pr(>|t|)"]
))
print(paste0(
"p-value fastLmPure estimation: ",
fraud_results_fastLmPure$p_value
))
# Register parallel backend to use multiple cores
numCores <- detectCores()
registerDoParallel(cores = numCores)
# iterate over n_var in parallel, estimate models for each n_var
random_model_sim <-
foreach(
i = 10:66,
.combine = rbind,
.packages = c("tidyverse"),
# create a tibble that is returned after the parallel processing
.init = tibble(
n_var = numeric(),
expl_var = list(),
model_call = character(),
coef_fastLmPure = numeric(),
pval_fastLmPure = numeric(),
stderr_fastLmPure = numeric()
)
) %dopar% {
# store all models for each n_var in a temporary object
tmp_res <- est_random_models(
coef_th = 100,
pval_th = -1,
n_var = c(i:i),
n_mod = 100,
timeout = 100
) %>%
unnest(results)
# return the tibble with all 5700 models
tibble(
n_var = i,
expl_var = list(tmp_res$expl_var),
model_call = tmp_res$model_call,
coef_fastLmPure = tmp_res$coefficient_estimate,
pval_fastLmPure = tmp_res$p_value,
stderr_fastLmPure = tmp_res$stderr
)
}
# Stop the parallel backend
stopImplicitCluster()
# plan multisession for parallel use of the map function (future map)
plan(multisession, workers = detectCores())
# estimate the same models with the lm function
random_model_sim$model_lm <-
future_map(random_model_sim$expl_var,
is_variable_significant,
response = "GR6096",
variable_to_assess = "SOCIALIST",
data = bacedata
)
# back to sequential processing
plan(sequential)
# create plot to show how difference increases with n_var
random_model_sim_plot <- random_model_sim %>%
select(n_var, model_lm, pval_fastLmPure) %>%
unnest(model_lm) %>%
rename(pval_lm = p_value) %>%
select(n_var, pval_fastLmPure, pval_lm) %>%
mutate(pval_diff = pval_fastLmPure - pval_lm) %>%
ggplot(aes(x = n_var, y = pval_diff)) +
geom_point() +
geom_smooth() +
labs(
title = "Difference in p-values from fastLmPure vs lm",
x = "number of explanatory variables",
y = "difference in p-values"
) +
theme_minimal()
# make it look nice and interactive
ggplotly(random_model_sim_plot)
sessionInfo()
tic()
plan(multisession, workers = detectCores())
# estimate the same models with the lm function
random_model_sim$model_lm <-
future_map(random_model_sim$expl_var,
is_variable_significant,
response = "GR6096",
variable_to_assess = "SOCIALIST",
data = bacedata
)
View(random_model_sim)
View(random_model_sim[[2]][[201]])
numCores <- detectCores()
registerDoParallel(cores = numCores)
# iterate ofer n_var in parallel, estimate models for each n_var
random_model_sim <-
foreach(
i = 10:66,
.combine = rbind,
.packages = c("tidyverse"),
.init = tibble(
n_var = numeric(),
expl_var = list(),
model_call = character(),
coef_fastLmPure = numeric(),
pval_fastLmPure = numeric(),
stderr_fastLmPure = numeric()
)
) %dopar% {
tmp_res <- est_random_models(
coef_th = 100,
pval_th = -1,
n_var = c(i:i),
n_mod = 100,
timeout = 100
) %>%
unnest(results)
tibble(
n_var = i,
expl_var = tmp_res$expl_var,
model_call = tmp_res$model_call,
coef_fastLmPure = tmp_res$coefficient_estimate,
pval_fastLmPure = tmp_res$p_value,
stderr_fastLmPure = tmp_res$stderr
)
}
# Stop the parallel backend
stopImplicitCluster()
# Register parallel backend to use multiple cores
numCores <- detectCores()
registerDoParallel(cores = numCores)
# iterate over n_var in parallel, estimate models for each n_var
random_model_sim <-
foreach(
i = 10:66,
.combine = rbind,
.packages = c("tidyverse"),
# create a tibble that is returned after the parallel processing
.init = tibble(
n_var = numeric(),
expl_var = list(),
model_call = character(),
coef_fastLmPure = numeric(),
pval_fastLmPure = numeric(),
stderr_fastLmPure = numeric()
)
) %dopar% {
# store all models for each n_var in a temporary object
tmp_res <- est_random_models(
coef_th = 100,
pval_th = -1,
n_var = c(i:i),
n_mod = 100,
timeout = 100
) %>%
unnest(results)
# return the tibble with all 5700 models
tibble(
n_var = i,
expl_var = tmp_res$expl_var,
model_call = tmp_res$model_call,
coef_fastLmPure = tmp_res$coefficient_estimate,
pval_fastLmPure = tmp_res$p_value,
stderr_fastLmPure = tmp_res$stderr
)
}
# Stop the parallel backend
stopImplicitCluster()
# plan multisession for parallel use of the map function (future map)
plan(multisession, workers = detectCores())
# estimate the same models with the lm function
random_model_sim$model_lm <-
future_map(random_model_sim$expl_var,
is_variable_significant,
response = "GR6096",
variable_to_assess = "SOCIALIST",
data = bacedata
)
# back to sequential processing
plan(sequential)
# create plot to show how difference increases with n_var
random_model_sim_plot <- random_model_sim %>%
select(n_var, model_lm, pval_fastLmPure) %>%
unnest(model_lm) %>%
rename(pval_lm = p_value) %>%
select(n_var, pval_fastLmPure, pval_lm) %>%
mutate(pval_diff = pval_fastLmPure - pval_lm) %>%
ggplot(aes(x = n_var, y = pval_diff)) +
geom_point() +
geom_smooth() +
labs(
title = "Difference in p-values from fastLmPure vs lm",
x = "number of explanatory variables",
y = "difference in p-values"
) +
theme_minimal()
# make it look nice and interactive
ggplotly(random_model_sim_plot)
install.packages("fpp3")
setwd("~/Master/NHH/2_Courses/BAN400/BAN400 Final Exam")
setwd("C:/Users/luisr/OneDrive/Dokumente/Master/NHH/2_Courses/BAN430/Lecture 2 Graphics")
library(fpp3)
library(tidyverse)
# read the data:
temp <- read_csv2(
"https://raw.githubusercontent.com/holleland/BAN430/master/data/bergen_temp.csv")
temp
# simulate white noise
set.seed(30)
y <- tsibble(sample = 1:50, wn = rnorm(50), index = sample)
y |> autoplot(wn) + labs(title = "White noise", y = "")
y %>% autoplot(wn) + labs(title = "White noise", y = "")
y %>%
ACF(wn) %>%
autoplot() + labs(title = "White noise")
library(fpp3)
library(tidyverse)
# read the data:
temp <- read_csv2(
"https://raw.githubusercontent.com/holleland/BAN430/master/data/bergen_temp.csv")
# simulate white noise
set.seed(30)
y <- tsibble(sample = 1:50, wn = rnorm(50), index = sample)
y %>% autoplot(wn) + labs(title = "White noise", y = "")
y %>%
ACF(wn) %>%
autoplot() + labs(title = "White noise")
temp
# Convert date column from character to date and temp to numeric:
temp <- temp %>%
mutate(date = as.Date(date, format = "%d.%m.%Y"),
temp = as.numeric(temp))
temp
# Creating a tsibble
temp.ts <- temp %>% as_tsibble(index = date)
temp.ts
# autoplot time series
temp.ts %>% autoplot(temp)
# example with key columns in tsibble object
citytemp <- read_csv2(
"https://raw.githubusercontent.com/holleland/BAN430/master/data//citytemp.csv")
citytemp.ts <- citytemp %>%
mutate(date = as.Date(date, format = "%d.%m.%Y")) %>%
filter(!is.na(date)) %>%
as_tsibble(index = date,
key = c("name","station"))
citytemp.ts
citytemp.ts <- citytemp %>%
mutate(date = as.Date(date, format = "%d.%m.%Y")) %>%
filter(!is.na(date)) %>%
as_tsibble(index = date)
citytemp.ts <- citytemp %>%
mutate(date = as.Date(date, format = "%d.%m.%Y")) %>%
filter(!is.na(date)) %>%
as_tsibble(index = date,
key = c("name","station"))
citytemp.ts %>% autoplot(temp)
citytemp.ts %>% autoplot()
# read the data
tute1 <- readr::read_csv("https://bit.ly/fpptute1")
View(tute1)
tute1
# convert data to timeseries data
tute1 <- tute1 %>%
mutate(Quarter = yearquarter(Quarter)) %>%
as_tsibble(index = Quarter)
# create time series plot of each of the 3 series (sales, ad budget, gdp)
tute1 %>%
ggplot(aes(x = Quarter, y = value, color = name)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y")
# create time series plot of each of the 3 series (sales, ad budget, gdp)
tute1 %>%
pivot_longer(-Quarter)
# create time series plot of each of the 3 series (sales, ad budget, gdp)
tute1 %>%
pivot_longer(-Quarter) %>%
ggplot(aes(x = Quarter, y = value, color = name)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y")
tute1 %>%
pivot_longer(-Quarter) %>%
ggplot(aes(x = Quarter, y = value, color = name)) +
geom_line()
tute1 %>%
pivot_longer(-Quarter) %>%
ggplot(aes(x = Quarter, y = value, color = name)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y")
tute1 %>%
pivot_longer(-Quarter) %>%
ggplot(aes(x = Quarter, y = value, color = name)) +
geom_line()
tute1 %>%
pivot_longer(-Quarter) %>%
ggplot(aes(x = Quarter, y = value, color = name)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y")
# create time series plot of each of the 3 series (sales, ad budget, gdp)
tute1 %>%
pivot_longer(-Quarter) %>%
ggplot(aes(x = Quarter, y = value, color = name)) +
geom_line() +
facet_grid(name ~ .)
# create time series plot of each of the 3 series (sales, ad budget, gdp)
tute1 %>%
pivot_longer(-Quarter) %>%
ggplot(aes(x = Quarter, y = value, color = name)) +
geom_line() +
facet_grid(name ~ ., scales = "free_y")
library("USgas")
install.packages("USgas")
library(USgas)
us_total
us_total
us_total.ts <- us_total %>%
as_tibble()
View(us_total.ts)
us_total.ts <- us_total %>%
as_tibble() %>%
as_tsibble(index = "year", key = c("state"))
us_total.ts
us_total.ts %>%
filter(state %in% c("Maine", "Vermont", "New Hampshire", "Massachusetts", "Connecticut","Rhode Island")) %>%
ggplot(aes(x = year, y = y, color = state)) +
geom_line() +
facet_grid(state ~ ., scales = "free_y")
temp.ts
citytemp.ts
citytemp.ts %>%
mutate(date = yearmonth(date)) %>%
ggplot(aes(x = date, y = meanTemp)) +
geom_line()
citytemp.ts %>%
mutate(date = yearmonth(date)) %>%
ggplot(aes(x = date, y = meanTemp, color = name)) +
geom_line()
citytemp.ts %>%
as_tsibble %>%
mutate(date = yearmonth(date)) %>%
ggplot(aes(x = date, y = meanTemp, color = name)) +
geom_line()
citytemp.ts %>%
as_tibble %>%
mutate(date = yearmonth(date)) %>%
ggplot(aes(x = date, y = meanTemp, color = name)) +
geom_line()
citytemp.ts %>%
as_tibble %>%
mutate(month = month(date)) %>%
ggplot(aes(x = month, y = meanTemp, color = name)) +
geom_line()
citytemp.ts %>%
as_tibble %>%
mutate(month = month.abb[month(date)]) %>%
ggplot(aes(x = month, y = meanTemp, color = name)) +
geom_line()
citytemp.ts %>%
as_tibble %>%
mutate(month = month.abb[month(date)]) %>%
ggplot(aes(x = month, y = meanTemp, color = year)) +
geom_line()
citytemp.ts %>%
as_tibble %>%
mutate(month = month.abb[month(date)],
year = year(date)) %>%
ggplot(aes(x = month, y = meanTemp, color = year)) +
geom_line()
citytemp.ts %>%
as_tibble %>%
mutate(month = month.abb[month(date)],
year = as.factor(year(date))) %>%
ggplot(aes(x = month, y = meanTemp, color = year)) +
geom_line()
citytemp.ts
citytemp.ts %>%
gg_season(meanTemp, period = "month")
citytemp.ts %>%
mutate(date = yearmonth(date)) %>%
gg_season(meanTemp, period = "month")
View(citytemp.ts)
citytemp.ts %>%
mutate(date = yearmonth(date))
citytemp.ts
?gg_season
citytemp.ts %>%
gg_season(., y = meanTemp, period = "month")
citytemp.ts %>%
fill_gaps() %>%
gg_season(., y = meanTemp, period = "month")
citytemp.ts %>%
gg_season(., y = meanTemp, period = "year")
citytemp.ts %>%
gg_season(., y = meanTemp, period = "year")
citytemp.ts %>% fill_gaps() %>%  gg_season(meanTemp)
citytemp.ts %>% fill_gaps() %>%  gg_season(meanTemp, period = "year")
citytemp.ts %>% autoplot(meanTemp)
citytemp.ts %>% fill_gaps()%>%  gg_subseries(meanTemp)
# make a seasonal subseries plot
citytemp.ts %>% fill_gaps() %>%  gg_subseries(meanTemp)
citytemp.ts %>% fill_gaps() %>%  gg_subseries(meanTemp)
View(citytemp.ts)
# aggregate to weekly and monthly averages
citytemp.ts.wk <- citytemp.ts %>%
as_tibble() %>%
mutate(week = yearweek(date))
View(citytemp.ts.wk)
# aggregate to weekly and monthly averages
citytemp.ts.wk <- citytemp.ts %>%
as_tibble() %>%
mutate(week = yearweek(date)) %>%
select(-date) %>%
summarise(meanTemp = mean(meanTemp))
# aggregate to weekly and monthly averages
citytemp.ts.wk <- citytemp.ts %>%
as_tibble() %>%
mutate(week = yearweek(date)) %>%
select(-date) %>%
group_by(-meanTemp) %>%
summarise(meanTemp = mean(meanTemp))
View(citytemp.ts)
# aggregate to weekly and monthly averages
citytemp.ts.wk <- citytemp.ts %>%
as_tibble() %>%
mutate(week = yearweek(date)) %>%
select(-date) %>%
group_by(week, name, station) %>%
summarise(meanTemp = mean(meanTemp))
# aggregate to weekly and monthly averages
citytemp.ts.wk <- citytemp.ts %>%
as_tibble() %>%
mutate(week = yearweek(date)) %>%
select(-date) %>%
group_by(week, name, station) %>%
summarise(meanTemp = mean(meanTemp)) %>%
as_tsibble(index = week,
key = c("name", "station"))
citytemp.ts.wk
citytemp.ts.mt <- citytemp.ts %>%
as_tibble() %>%
mutate(month = yearmonth(date)) %>%
select(-date) %>%
group_by(month, name, station) %>%
summarise(meanTemp = mean(meanTemp)) %>%
as_tsibble(index = month,
key = c("name", "station"))
View(citytemp.ts.mt)
citytemp.ts.wk %>% autoplot(meanTemp)+facet_wrap(~name)
citytemp.ts.wk %>% fill_gaps() %>%  gg_season(meanTemp)
citytemp.ts.mt %>% autoplot(meanTemp)+facet_wrap(~name)
citytemp.ts.mt %>% gg_subseries(meanTemp)
